<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—ñ–±—Ä–∏–¥–∞ Wasteland Crossing</title>
    <style>
        :root {
            --primary: #ff6b35;
            --secondary: #4ecdc4;
            --dark: #292f36;
            --light: #f7fff7;
            --accent: #ff9f1c;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            background-color: var(--dark);
            color: var(--light);
            line-height: 1.6;
            background-image: linear-gradient(rgba(41, 47, 54, 0.9), rgba(41, 47, 54, 0.9)), 
                              url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23292f36"/><path d="M0 0L100 100M100 0L0 100" stroke="%23343e46" stroke-width="1"/></svg>');
        }
        
        h1 {
            color: var(--accent);
            text-align: center;
            border-bottom: 2px solid var(--primary);
            padding-bottom: 10px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        
        h2 {
            color: var(--secondary);
            margin-top: 25px;
            border-left: 3px solid var(--primary);
            padding-left: 10px;
        }
        
        .container {
            background-color: rgba(52, 62, 70, 0.8);
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.7);
            border: 1px solid #3d4a52;
            margin-bottom: 20px;
        }
        
        .character-card {
            background: linear-gradient(145deg, #384047, #2d353b);
            border-radius: 8px;
            padding: 20px;
            margin-top: 20px;
            border-left: 4px solid var(--primary);
            box-shadow: inset 0 0 10px rgba(0,0,0,0.3);
        }
        
        .stat {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            padding-bottom: 8px;
            border-bottom: 1px dashed #4a565c;
        }
        
        .stat-value {
            font-weight: bold;
            color: var(--accent);
        }
        
        button {
            background: linear-gradient(to bottom, var(--primary), #e55a2b);
            color: var(--light);
            border: none;
            padding: 14px 28px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            display: block;
            margin: 25px auto;
            transition: all 0.3s;
            box-shadow: 0 4px 6px rgba(0,0,0,0.3);
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0,0,0,0.4);
            background: linear-gradient(to bottom, #ff7c4a, var(--primary));
        }
        
        .skill-info {
            margin-top: 15px;
            padding: 12px;
            background-color: rgba(255, 107, 53, 0.1);
            border-radius: 5px;
            font-size: 14px;
            border-left: 3px solid var(--primary);
        }
        
        .highlight {
            color: var(--accent);
            font-weight: bold;
        }
        
        .bio-prosthetic {
            color: var(--secondary);
            font-style: italic;
        }
        
        .character-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .character-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: linear-gradient(145deg, var(--primary), var(--accent));
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-size: 36px;
            color: white;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        
        .character-name {
            font-size: 24px;
            font-weight: bold;
            color: var(--light);
        }
        
        .character-mutation {
            font-size: 18px;
            color: var(--secondary);
        }
        
        .footer {
            text-align: center;
            margin-top: 30px;
            font-size: 12px;
            color: #8a9ba8;
        }
        
        .prompt-box {
            background-color: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
            border: 1px solid var(--primary);
        }
        
        .prompt-text {
            font-family: monospace;
            white-space: pre-wrap;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
            max-height: 200px;
            overflow-y: auto;
        }
        
        .copy-btn {
            background: linear-gradient(to bottom, var(--secondary), #3bb5ac);
            padding: 8px 16px;
            font-size: 14px;
            margin: 10px 0;
        }
        
        .hybrid-description {
            font-style: italic;
            color: #c8d3d2;
            margin: 10px 0;
            padding: 10px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 5px;
        }
        
        .abilities-list {
            margin: 10px 0;
            padding-left: 20px;
        }
        
        .abilities-list li {
            margin-bottom: 5px;
        }
        
        .hybrid-type {
            display: inline-block;
            padding: 3px 8px;
            background: var(--primary);
            border-radius: 12px;
            font-size: 12px;
            margin-left: 10px;
            vertical-align: middle;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—ñ–±—Ä–∏–¥–∞ Wasteland Crossing</h1>
        
        <div class="character-card" id="characterCard">
            <p>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –≥—ñ–±—Ä–∏–¥–∞!</p>
        </div>
        
        <button onclick="generateCharacter()">–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –≥—ñ–±—Ä–∏–¥–∞</button>
        
        <div class="skill-info">
            <p><span class="highlight">–í–∏—â–∞ —Ü–∏—Ñ—Ä–∞</span> = –∫—Ä–∞—â—ñ –Ω–∞–≤–∏—á–∫–∏ <span class="highlight">–í–ò–ù–ê–•–Ü–î–õ–ò–í–û–°–¢–Ü</span> (—Ä–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω—ñ–∫–∏, —Ç–æ—Ä–≥—ñ–≤–ª—è, –ø–æ—à—É–∫ —Ä–µ—Å—É—Ä—Å—ñ–≤)</p>
            <p><span class="highlight">–ù–∏–∂—á–∞ —Ü–∏—Ñ—Ä–∞</span> = –∫—Ä–∞—â—ñ <span class="highlight">–§–Ü–ó–ò–ß–ù–Ü –ù–ê–í–ò–ß–ö–ò</span> (—Å–∏–ª–∞, –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å, –ø–æ–ª—é–≤–∞–Ω–Ω—è)</p>
        </div>
    </div>

    <div class="container" id="promptContainer" style="display: none;">
        <h2>–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</h2>
        <div class="prompt-box">
            <p>–°–∫–æ–ø—ñ—é–π—Ç–µ —Ü–µ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ:</p>
            <div class="prompt-text" id="imagePrompt"></div>
            <button class="copy-btn" onclick="copyPrompt()">–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –ø—Ä–æ–º–ø—Ç</button>
        </div>
    </div>

    <div class="footer">
        Wasteland Crossing RPG ‚Ä¢ –ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª—ñ–ø—Ç–∏—á–Ω–∏–π —Å–µ—Ç—Ç—ñ–Ω–≥ –∑ –≥—ñ–±—Ä–∏–¥–∞–º–∏ —Ç–≤–∞—Ä–∏–Ω
    </div>

    <script>
        // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        const animals = {
            "–í–æ–≤–∫": {
                traits: ["–≤–æ–≤—á–µ –≤—É—Ö–∞", "–≥–æ—Å—Ç—Ä—ñ —ñ–∫–ª–∞", "–ø—É—Ö–Ω–∞—Å—Ç–∏–π —Ö–≤—ñ—Å—Ç", "–∑–≥—Ä–∞–π–Ω–∏–π —ñ–Ω—Å—Ç–∏–Ω–∫—Ç"],
                abilities: ["—á—É—Ç–∫–∏–π –Ω—é—Ö", "–≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", "–ø–æ–ª—é–≤–∞–Ω–Ω—è –≤ –∑–≥—Ä–∞—ó"],
                size: "medium",
                type: "—Å—Å–∞–≤–µ—Ü—å",
                habitat: "–ª—ñ—Å",
                avatar: "üê∫"
            },
            "–í–µ–¥–º—ñ–¥—å": {
                traits: ["–≤–µ–¥–º–µ–∂–∞ —à–µ—Ä—Å—Ç—å", "–ø–æ—Ç—É–∂–Ω—ñ –ª–∞–ø–∏", "–≤–µ–ª–∏–∫—ñ –∫—ñ–≥—Ç—ñ", "–º–∞—Å–∏–≤–Ω–∞ —Å—Ç–∞—Ç—É—Ä–∞"],
                abilities: ["–Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∞ —Å–∏–ª–∞", "—Ä–∏—Ç–æ–∫–ª–∞–¥–Ω—ñ—Å—Ç—å", "–≤–º—ñ–Ω–Ω—è –ª–∞–∑–∏—Ç–∏ –ø–æ –¥–µ—Ä–µ–≤–∞—Ö"],
                size: "large",
                type: "—Å—Å–∞–≤–µ—Ü—å", 
                habitat: "–ª—ñ—Å",
                avatar: "üêª"
            },
            "–õ–∏—Å–∏—Ü—è": {
                traits: ["–≥–æ—Å—Ç—Ä–∏–π –Ω—ñ—Å", "—Ä—É–¥–µ —Ö—É—Ç—Ä–æ", "–ø—É—Ö–Ω–∞—Å—Ç–∏–π —Ö–≤—ñ—Å—Ç", "—Ö–∏—Ç—Ä—ñ –æ—á—ñ"],
                abilities: ["—Å–ø—Ä–∏—Ç–Ω—ñ—Å—Ç—å", "–º–∞—Å–∫—É–≤–∞–Ω–Ω—è", "–Ω–æ—Ä–Ω–µ –∂–∏—Ç–ª–æ"],
                size: "small",
                type: "—Å—Å–∞–≤–µ—Ü—å",
                habitat: "–ª—ñ—Å",
                avatar: "ü¶ä"
            },
            "–†–∏—Å—å": {
                traits: ["–∫–∏—Ç–∏—Ü—ñ –Ω–∞ –≤—É—Ö–∞—Ö", "–∫–æ—Ä–æ—Ç–∫–∏–π —Ö–≤—ñ—Å—Ç", "–ø–ª—è–º–∏—Å—Ç–∞ —à–µ—Ä—Å—Ç—å", "–≥–æ—Å—Ç—Ä—ñ –∫—ñ–≥—Ç—ñ"],
                abilities: ["—á—É–¥–æ–≤–∏–π –∑—ñ—Ä", "–º–∞–π—Å—Ç–µ—Ä–Ω—ñ—Å—Ç—å –ø–æ–ª—é–≤–∞–Ω–Ω—è", "—Å—Ç—Ä–∏–±–∫–∏ –Ω–∞ –≤–µ–ª–∏–∫—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ"],
                size: "medium",
                type: "—Å—Å–∞–≤–µ—Ü—å",
                habitat: "–ª—ñ—Å",
                avatar: "üêÜ"
            },
            "–°–æ–≤–∞": {
                traits: ["–≤–µ–ª–∏–∫—ñ –æ—á—ñ", "–∫—Ä—É–≥–ª–∞ –≥–æ–ª–æ–≤–∞", "–≥–æ—Å—Ç—Ä–∏–π –¥–∑—å–æ–±", "–º—ñ—Ü–Ω—ñ –ª–∞–ø–∏"],
                abilities: ["–Ω—ñ—á–Ω–∏–π –∑—ñ—Ä", "–±–µ–∑—à—É–º–Ω–∏–π –ø–æ–ª—ñ—Ç", "–æ–±–µ—Ä—Ç–∞–Ω–Ω—è –≥–æ–ª–æ–≤–∏ –Ω–∞ 270¬∞"],
                size: "medium",
                type: "–ø—Ç–∞—Ö",
                habitat: "–ª—ñ—Å",
                avatar: "ü¶â"
            },
            "–í–æ—Ä–æ–Ω": {
                traits: ["—á–æ—Ä–Ω–µ –ø—ñ—Ä'—è", "–≥–æ—Å—Ç—Ä–∏–π –¥–∑—å–æ–±", "–∫—Ä—É—ó–ª—ñ –Ω–æ–≥–∏", "–±–ª–∏—Å–∫—É—á—ñ –æ—á—ñ"],
                abilities: ["—ñ–Ω—Ç–µ–ª–µ–∫—Ç", "–∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –Ω–∞—Å–ª—ñ–¥—É–≤–∞—Ç–∏ –∑–≤—É–∫–∏", "–æ—Ä—ñ—î–Ω—Ç—É–≤–∞–Ω–Ω—è –≤ –ø—Ä–æ—Å—Ç–æ—Ä—ñ"],
                size: "small",
                type: "–ø—Ç–∞—Ö", 
                habitat: "–≤—Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ",
                avatar: "üê¶‚Äç‚¨õ"
            },
            "–ó–º—ñ—è": {
                traits: ["–¥–æ–≤–≥–µ —Ç—ñ–ª–æ", "–ª—É—Å–∫–∞—Ç–∞ —à–∫—ñ—Ä–∞", "—Ä–æ–∑–¥–≤–æ—î–Ω–∏–π —è–∑–∏–∫", "–±–µ–∑ –ø–æ–≤—ñ–∫"],
                abilities: ["–æ—Ç—Ä—É–π–Ω—ñ —ñ–∫–ª–∞", "—ñ–Ω—Ñ—Ä–∞—á–µ—Ä–≤–æ–Ω–∏–π –∑—ñ—Ä", "–∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –≤—ñ–¥—á—É–≤–∞—Ç–∏ –≤—ñ–±—Ä–∞—Ü—ñ—ó"],
                size: "medium",
                type: "—Ä–µ–ø—Ç–∏–ª—ñ—è",
                habitat: "—Ä—ñ–∑–Ω–∏–π",
                avatar: "üêç"
            },
            "–Ø—â—ñ—Ä–∫–∞": {
                traits: ["–ª—É—Å–∫–∞—Ç–∞ —à–∫—ñ—Ä–∞", "–¥–æ–≤–≥–∏–π —Ö–≤—ñ—Å—Ç", "—Ä—É—Ö–ª–∏–≤–µ —Ç—ñ–ª–æ", "–∫—ñ–≥—Ç–∏—Å—Ç—ñ –ª–∞–ø–∏"],
                abilities: ["—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ö–≤–æ—Å—Ç–∞", "–ª–∞–∑–∞–Ω–Ω—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—è—Ö", "–∑–º—ñ–Ω–∞ –∫–æ–ª—å–æ—Ä—É"],
                size: "small",
                type: "—Ä–µ–ø—Ç–∏–ª—ñ—è",
                habitat: "–ø—É—Å—Ç–µ–ª—è",
                avatar: "ü¶é"
            },
            "–ö–∞–∂–∞–Ω": {
                traits: ["–∫—Ä–∏–ª–∞", "–≤–µ–ª–∏–∫—ñ –≤—É—Ö–∞", "–≥–æ—Å—Ç—Ä—ñ —ñ–∫–ª–∞", "–Ω–µ–∑–≤–∏—á–∞–π–Ω–∏–π –Ω—ñ—Å"],
                abilities: ["–µ—Ö–æ–ª–æ–∫–∞—Ü—ñ—è", "–Ω—ñ—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è", "–ø–æ–ª—é–≤–∞–Ω–Ω—è –≤ –ø–æ–ª—å–æ—Ç—ñ"],
                size: "small",
                type: "—Å—Å–∞–≤–µ—Ü—å",
                habitat: "–ø–µ—á–µ—Ä–∏",
                avatar: "ü¶á"
            },
            "–ü–∞–≤—É–∫": {
                traits: ["–±–∞–≥–∞—Ç–æ –æ—á–µ–π", "–¥–æ–≤–≥—ñ –Ω–æ–≥–∏", "—á–µ–ª–µ—Ü–µ—Ä–∏", "–ø—É—Ö–Ω–∞—Å—Ç–µ —Ç—ñ–ª–æ"],
                abilities: ["–ø–ª–µ—Ç—ñ–Ω–Ω—è –ø–∞–≤—É—Ç–∏–Ω–∏", "–æ—Ç—Ä—É—Ç–∞", "—á—É—Ç–ª–∏–≤—ñ—Å—Ç—å –¥–æ –≤—ñ–±—Ä–∞—Ü—ñ–π"],
                size: "small",
                type: "—á–ª–µ–Ω–∏—Å—Ç–æ–Ω–æ–≥—ñ",
                habitat: "–≤—Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ",
                avatar: "üï∑Ô∏è"
            }
        };

        // –î—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const personalities = [
            "–¶–∏–Ω—ñ—á–Ω–∏–π", "–ï–Ω–µ—Ä–≥—ñ–π–Ω–∏–π", "–ê–ø–∞—Ç–∏—á–Ω–∏–π", 
            "–û–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–∏–π", "–ï–≥–æ—ó—Å—Ç–∏—á–Ω–∏–π", "–ê–≥—Ä–µ—Å–∏–≤–Ω–∏–π",
            "–û–±–µ—Ä–µ–∂–Ω–∏–π", "–î–æ–ø–∏—Ç–ª–∏–≤–∏–π", "–í—ñ–¥—á–∞–π–¥—É—à–Ω–∏–π", "–°–ø–æ–∫—ñ–π–Ω–∏–π"
        ];
        
        const names = [
            "–ú–∞—Ä–∫–æ", "–û–ª–µ–≥", "–Æ—Ä—ñ–π", "–ê–Ω–¥—Ä—ñ–π", "–°–µ—Ä–≥—ñ–π", 
            "–Ü–≤–∞–Ω", "–î–º–∏—Ç—Ä–æ", "–û–ª–µ–∫—Å—ñ–π", "–ë–æ–≥–¥–∞–Ω", "–†–æ–º–∞–Ω",
            "–ù–∞—Ç–∞–ª—è", "–û–∫—Å–∞–Ω–∞", "–ö–∞—Ç–µ—Ä–∏–Ω–∞", "–ú–∞—Ä—ñ—è", "–¢–µ—Ç—è–Ω–∞",
            "–ê–Ω–Ω–∞", "–Ü—Ä–∏–Ω–∞", "–°–æ—Ñ—ñ—è", "–í—ñ–∫—Ç–æ—Ä—ñ—è", "–Ø—Ä–∏–Ω–∞"
        ];
        
        const surnames = [
            "–ö–æ–≤–∞–ª—å", "–®–µ–≤—á–µ–Ω–∫–æ", "–ë–æ–Ω–¥–∞—Ä", "–ú–µ–ª—å–Ω–∏–∫", "–ö—Ä–∞–≤—á–µ–Ω–∫–æ",
            "–¢–∫–∞—á–µ–Ω–∫–æ", "–ü–µ—Ç—Ä–µ–Ω–∫–æ", "–ö–ª–∏–º–µ–Ω–∫–æ", "–ü–∞–≤–ª–µ–Ω–∫–æ", "–°–∞–≤—á–µ–Ω–∫–æ",
            "–ì–æ–Ω—á–∞—Ä", "–ë—ñ–ª–∏–π", "–ß–æ—Ä–Ω–∏–π", "–ö—Ä—É—Ç–∏–π", "–°—ñ—Ä–∏–π"
        ];
        
        const appearances = [
            "–∑—ñ —à—Ä–∞–º–æ–º —á–µ—Ä–µ–∑ –≤—Å–µ –æ–±–ª–∏—á—á—è",
            "–∑ —Å—ñ—Ä–æ—é, –ø–æ—à–∞—Ä–ø–∞–Ω–æ—é —à–∫—ñ—Ä–æ—é",
            "–∑ –±–ª–∏—Å–∫—É—á–∏–º–∏ –æ—á–∏–º–∞, —â–æ —Å–≤—ñ—Ç—è—Ç—å—Å—è –≤ —Ç–µ–º—Ä—è–≤—ñ",
            "–∑ –≤–æ–ª–æ—Å—Å—è–º, —â–æ –≤–∏—Ü–≤—ñ–ª–æ –≤—ñ–¥ —Ä–∞–¥—ñ–∞—Ü—ñ—ó",
            "–∑ –ø–æ—Ç—Ä—ñ—Å–∫–∞–Ω–∏–º–∏ –≥—É–±–∞–º–∏ —Ç–∞ –≥—Ä—É–±–æ—é —à–∫—ñ—Ä–æ—é",
            "–∑ –ø—Ä–æ–Ω–∏–∑–ª–∏–≤–∏–º –ø–æ–≥–ª—è–¥–æ–º —Ç–∞ —Å—Ç–µ—Ä—Ç–∏–º–∏ —Ä–∏—Å–∞–º–∏ –æ–±–ª–∏—á—á—è"
        ];
        
        const shelters = [
            "–ø—ñ–¥–≤–∞–ª —Å—Ç–∞—Ä–æ–≥–æ –±—É–¥–∏–Ω–∫—É –∑ –∑–∞—Ö–∏—Å–Ω–∏–º–∏ “ë—Ä–∞—Ç–∞–º–∏",
            "–º–µ—Ç–∞–ª–µ–≤–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ —Å–∏—Å—Ç–µ–º–æ—é –≤–µ–Ω—Ç–∏–ª—è—Ü—ñ—ó",
            "–ø—ñ–¥–∑–µ–º–Ω–µ —Å—Ö–æ–≤–∏—â–µ –∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º",
            "–≤–µ—Ä—Ö–Ω—ñ–π –ø–æ–≤–µ—Ä—Ö —Ä—É—ó–Ω –∑ –æ–≥–ª—è–¥–æ–≤–∏–º –º–∞–π–¥–∞–Ω—á–∏–∫–æ–º",
            "–ø–µ—á–µ—Ä–∞ –∑ —É–∫—Ä—ñ–ø–ª–µ–Ω–∏–º –≤—Ö–æ–¥–æ–º",
            "–∞–≤—Ç–æ–±—É—Å, –∑–∞—Å–∏–ø–∞–Ω–∏–π –ø—ñ—Å–∫–æ–º",
            "—Å—Ç–∞—Ä–∏–π –±—É–Ω–∫–µ—Ä –∑ –æ—á–∏—â—É–≤–∞—á–µ–º –ø–æ–≤—ñ—Ç—Ä—è",
            "–ø–æ–∫–∏–Ω—É—Ç–∞ —Ñ–∞–±—Ä–∏–∫–∞ –∑ –ø–∞—Å—Ç–∫–∞–º–∏ –¥–ª—è –º—É—Ç–∞–Ω—Ç—ñ–≤"
        ];
        
        const bioProsthetics = [
            "–±—ñ–æ–º–µ—Ö–∞–Ω—ñ—á–Ω–∞ —Ä—É–∫–∞ –∑ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–º–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏",
            "–ø—Ä–æ—Ç–µ–∑ –æ–∫–∞ –∑ —ñ–Ω—Ñ—Ä–∞—á–µ—Ä–≤–æ–Ω–∏–º –∑–æ—Ä–æ–º",
            "–∫—ñ–±–µ—Ä–Ω–µ—Ç–∏—á–Ω–∞ –Ω–æ–≥–∞ –∑ –ø—ñ–¥—Å–∏–ª—é–≤–∞—á–µ–º —Å—Ç—Ä–∏–±–∫—ñ–≤",
            "—ñ–º–ø–ª–∞–Ω—Ç–æ–≤–∞–Ω–∏–π –∫–æ–º—É–Ω—ñ–∫–∞—Ç–æ—Ä —É —Å–∫—Ä–æ–Ω—ñ",
            "–±—ñ–æ–ø—Ä–æ—Ç–µ–∑ —Å–µ—Ä—Ü—è –∑ –µ–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–∏–º —è–¥—Ä–æ–º",
            "–º–µ—Ö–∞–Ω—ñ—á–Ω–∏–π —Ö–≤—ñ—Å—Ç-—Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ç–æ—Ä",
            "–≤–±—É–¥–æ–≤–∞–Ω–∏–π —Å–∫–∞–Ω–µ—Ä —Ä–∞–¥—ñ–∞—Ü—ñ—ó –≤ –ø–µ—Ä–µ–¥–ø–ª—ñ—á—á—ñ",
            "–∫—ñ–±–µ—Ä–Ω–µ—Ç–∏—á–Ω—ñ –ª–µ–≥–µ–Ω—ñ –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º —Ç–æ–∫—Å–∏–Ω—ñ–≤",
            "–ø—Ä–æ—Ç–µ–∑ –∑ –≤–±—É–¥–æ–≤–∞–Ω–∏–º –º–µ–¥–∏—á–Ω–∏–º —Å–∫–∞–Ω–µ—Ä–æ–º",
            "–±—ñ–æ–º–µ—Ö–∞–Ω—ñ—á–Ω–µ –æ–∫–æ –∑ —Ñ—É–Ω–∫—Ü—ñ—î—é –∑–∞–ø–∏—Å—É"
        ];

        // –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–±—Ä–∏–¥–æ–≤
        function createHybrid() {
            const animalNames = Object.keys(animals);
            let animal1, animal2;
            
            // 70% chance –¥–ª—è –ª–æ–≥–∏—á–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, 30% –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π
            if (Math.random() < 0.7) {
                // –õ–æ–≥–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É, —Ä–∞–∑–º–µ—Ä—É –∏–ª–∏ —Å—Ä–µ–¥–µ –æ–±–∏—Ç–∞–Ω–∏—è
                const animal1Name = animalNames[Math.floor(Math.random() * animalNames.length)];
                animal1 = animals[animal1Name];
                
                // –ù–∞—Ö–æ–¥–∏–º –ª–æ–≥–∏—á–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                const compatibleAnimals = animalNames.filter(name => {
                    const animal = animals[name];
                    return (
                        animal.type === animal1.type || 
                        animal.habitat === animal1.habitat ||
                        animal.size === animal1.size
                    ) && name !== animal1Name;
                });
                
                if (compatibleAnimals.length > 0) {
                    const animal2Name = compatibleAnimals[Math.floor(Math.random() * compatibleAnimals.length)];
                    animal2 = animals[animal2Name];
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–≥–∏—á–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ
                    const animal2Name = animalNames.filter(name => name !== animal1Name)[Math.floor(Math.random() * (animalNames.length - 1))];
                    animal2 = animals[animal2Name];
                }
            } else {
                // –°–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
                const animal1Name = animalNames[Math.floor(Math.random() * animalNames.length)];
                animal1 = animals[animal1Name];
                const animal2Name = animalNames.filter(name => name !== animal1Name)[Math.floor(Math.random() * (animalNames.length - 1))];
                animal2 = animals[animal2Name];
            }
            
            return { animal1: { name: Object.keys(animals).find(key => animals[key] === animal1), ...animal1 }, 
                     animal2: { name: Object.keys(animals).find(key => animals[key] === animal2), ...animal2 } };
        }

        // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        function generateCharacter() {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–∞
            const hybrid = createHybrid();
            const animal1 = hybrid.animal1;
            const animal2 = hybrid.animal2;
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            const personality = personalities[Math.floor(Math.random() * personalities.length)];
            const number = Math.floor(Math.random() * 4) + 2; // –ß–∏—Å–ª–æ –æ—Ç 2 –¥–æ 5
            const name = names[Math.floor(Math.random() * names.length)];
            const surname = surnames[Math.floor(Math.random() * surnames.length)];
            const appearance = appearances[Math.floor(Math.random() * appearances.length)];
            const shelter = shelters[Math.floor(Math.random() * shelters.length)];
            const bioProsthetic = bioProsthetics[Math.floor(Math.random() * bioProsthetics.length)];
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≥–∏–±—Ä–∏–¥–∞
            const hybridDescription = generateHybridDescription(animal1, animal2);
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≥–∏–±—Ä–∏–¥–∞
            const hybridAbilities = generateHybridAbilities(animal1, animal2);
            
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–∞–≤—ã–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–ª–∞
            let skillType, skillDescription;
            if (number >= 4) {
                skillType = "–í–ò–ù–ê–•–Ü–î–õ–ò–í–Ü–°–¢–¨";
                skillDescription = "–í–∏ –º–∞—î—Ç–µ —Ç–∞–ª–∞–Ω—Ç –¥–æ —Ä–µ–º–æ–Ω—Ç—É —Ç–µ—Ö–Ω—ñ–∫–∏, —Ç–æ—Ä–≥—ñ–≤–ª—ñ —Ç–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤ —Å–µ—Ä–µ–¥ —Ä—É—ó–Ω.";
            } else {
                skillType = "–§–Ü–ó–ò–ß–ù–Ü –ù–ê–í–ò–ß–ö–ò";
                skillDescription = "–í–∏ —Å–∏–ª—å–Ω—ñ, –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ —Ç–∞ –≤–ø—Ä–∞–≤–Ω—ñ —É –ø–æ–ª—é–≤–∞–Ω–Ω—ñ —Ç–∞ —Å–∞–º–æ–∑–∞—Ö–∏—Å—Ç—ñ.";
            }
            
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≥–∏–±—Ä–∏–¥–∞
            const hybridType = determineHybridType(animal1, animal2);
            
            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            const characterCard = document.getElementById('characterCard');
            characterCard.innerHTML = `
                <div class="character-header">
                    <div class="character-avatar">${animal1.avatar}</div>
                    <div>
                        <div class="character-name">${name} ${surname} <span class="hybrid-type">${hybridType}</span></div>
                        <div class="character-mutation">–ì—ñ–±—Ä–∏–¥ ${animal1.name} + ${animal2.name}</div>
                    </div>
                </div>
                
                <div class="hybrid-description">${hybridDescription}</div>
                
                <div class="stat">
                    <span>–•–∞—Ä–∞–∫—Ç–µ—Ä:</span>
                    <span class="stat-value">${personality}</span>
                </div>
                
                <div class="stat">
                    <span>–ß–∏—Å–ª–æ –Ω–∞–≤–∏—á–∫–∏:</span>
                    <span class="stat-value">${number}</span>
                </div>
                
                <div class="stat">
                    <span>–¢–∏–ø –Ω–∞–≤–∏—á–∫–∏:</span>
                    <span class="stat-value">${skillType}</span>
                </div>
                
                <div class="stat">
                    <span>–ó–æ–≤–Ω—ñ—à–Ω—ñ—Å—Ç—å:</span>
                    <span class="stat-value">${appearance}</span>
                </div>
                
                <div class="stat">
                    <span>–ë—ñ–æ–ø—Ä–æ—Ç–µ–∑:</span>
                    <span class="bio-prosthetic">${bioProsthetic}</span>
                </div>
                
                <div class="stat">
                    <span>–£–∫—Ä–∏—Ç—Ç—è:</span>
                    <span class="stat-value">${shelter}</span>
                </div>
                
                <div>
                    <span class="highlight">–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ:</span>
                    <ul class="abilities-list">
                        ${hybridAbilities.map(ability => `<li>${ability}</li>`).join('')}
                    </ul>
                </div>
                
                <div class="skill-info">
                    <p>${skillDescription}</p>
                    <p><span class="highlight">–ö–∏–¥–∫–∏ –Ω–∞–≤–∏—á–æ–∫:</span> –î–ª—è ${skillType.toLowerCase()} –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç ${number >= 4 ? "–Ω–∏–∂—á–µ" : "–≤–∏—â–µ"} –∑–∞ –≤–∞—à–µ —á–∏—Å–ª–æ (${number})</p>
                </div>
            `;
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            generateImagePrompt(name, surname, animal1, animal2, hybridDescription, appearance, bioProsthetic, shelter, hybridType);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–º–ø—Ç–æ–º
            document.getElementById('promptContainer').style.display = 'block';
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≥–∏–±—Ä–∏–¥–∞
        function generateHybridDescription(animal1, animal2) {
            const descriptions = [
                `${animal1.name} —Ç–∞ ${animal2.name} —Å—Ç–≤–æ—Ä–∏–ª–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –≥—ñ–±—Ä–∏–¥–∞, —â–æ –ø–æ—î–¥–Ω—É—î ${animal1.traits[0]} —Ç–∞ ${animal2.traits[1]}.`,
                `–¶–µ–π –≥—ñ–±—Ä–∏–¥ —É—Å–ø–∞–¥–∫—É–≤–∞–≤ ${animal1.traits[1]} –≤—ñ–¥ ${animal1.name} —Ç–∞ ${animal2.traits[0]} –≤—ñ–¥ ${animal2.name}.`,
                `–ü–æ—î–¥–Ω–∞–Ω–Ω—è ${animal1.name} —Ç–∞ ${animal2.name} –¥–∞–ª–æ –ø–æ—á–∞—Ç–æ–∫ –Ω–æ–≤—ñ–π —Ñ–æ—Ä–º—ñ –∂–∏—Ç—Ç—è –∑ ${animal1.traits[2]} —Ç–∞ ${animal2.traits[2]}.`,
                `–ú—É—Ç–∞—Ü—ñ—è –æ–±'—î–¥–Ω–∞–ª–∞ ${animal1.name} —Ç–∞ ${animal2.name}, —Å—Ç–≤–æ—Ä–∏–≤—à–∏ —ñ—Å—Ç–æ—Ç—É –∑ ${animal1.traits[3]} —Ç–∞ ${animal2.traits[3]}.`
            ];
            
            return descriptions[Math.floor(Math.random() * descriptions.length)];
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≥–∏–±—Ä–∏–¥–∞
        function generateHybridAbilities(animal1, animal2) {
            const abilities = [];
            
            // –ë–µ—Ä–µ–º –ø–æ 2 —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            const a1Abilities = [...animal1.abilities].sort(() => 0.5 - Math.random()).slice(0, 2);
            const a2Abilities = [...animal2.abilities].sort(() => 0.5 - Math.random()).slice(0, 2);
            
            abilities.push(...a1Abilities, ...a2Abilities);
            
            // 30% —à–∞–Ω—Å –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≥–∏–±—Ä–∏–¥–∞
            if (Math.random() < 0.3) {
                const uniqueAbilities = [
                    "–∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∞ –∞—Ç–∞–∫–∞",
                    "–ø–æ–∫—Ä–∞—â–µ–Ω–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è",
                    "—Ä–∞–¥—ñ–æ–∞–∫—Ç–∏–≤–Ω–∏–π —ñ–º—É–Ω—ñ—Ç–µ—Ç", 
                    "–µ–º–ø–∞—Ç—ñ—è –¥–æ —Ç–≤–∞—Ä–∏–Ω",
                    "–∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ä–æ—Å–ª–∏–Ω–∞–º–∏",
                    "—Ç–µ–ª–µ–ø–∞—Ç–∏—á–Ω–∏–π –∑–≤'—è–∑–æ–∫"
                ];
                abilities.push(uniqueAbilities[Math.floor(Math.random() * uniqueAbilities.length)]);
            }
            
            return abilities;
        }

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≥–∏–±—Ä–∏–¥–∞
        function determineHybridType(animal1, animal2) {
            if (animal1.type === animal2.type) {
                return animal1.type === "—Å—Å–∞–≤–µ—Ü—å" ? "–ó–µ–º–Ω–æ–≤–æ–¥–Ω–∏–π" : 
                       animal1.type === "–ø—Ç–∞—Ö" ? "–ö—Ä–∏–ª–∞—Ç–∏–π" : 
                       animal1.type === "—Ä–µ–ø—Ç–∏–ª—ñ—è" ? "–ü–ª–∞–∑—É–Ω" : "–ì—ñ–±—Ä–∏–¥";
            }
            
            const typeCombinations = {
                "—Å—Å–∞–≤–µ—Ü—å+–ø—Ç–∞—Ö": "–ö—Ä–∏–ª–∞—Ç–∏–π –∑–≤—ñ—Ä",
                "—Å—Å–∞–≤–µ—Ü—å+—Ä–µ–ø—Ç–∏–ª—ñ—è": "–õ—É—Å–∫–∞—Ç–∏–π –∑–≤—ñ—Ä", 
                "–ø—Ç–∞—Ö+—Ä–µ–ø—Ç–∏–ª—ñ—è": "–î—Ä–∞–∫–æ–Ω–æ–ø–æ–¥—ñ–±–Ω–∏–π",
                "–ø—Ç–∞—Ö+—á–ª–µ–Ω–∏—Å—Ç–æ–Ω–æ–≥—ñ": "–ö–æ–º–∞—Ö–æ-–ø—Ç–∞—Ö",
                "—Ä–µ–ø—Ç–∏–ª—ñ—è+—á–ª–µ–Ω–∏—Å—Ç–æ–Ω–æ–≥—ñ": "–û—Ç—Ä—É–π–Ω–∏–π –ø–ª–∞–∑—É–Ω"
            };
            
            const combination = [animal1.type, animal2.type].sort().join("+");
            return typeCombinations[combination] || "–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –≥—ñ–±—Ä–∏–¥";
        }

        // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        function generateImagePrompt(name, surname, animal1, animal2, hybridDescription, appearance, bioProsthetic, shelter, hybridType) {
            const prompt = `–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è RPG Wasteland Crossing:
            
–ü–µ—Ä—Å–æ–Ω–∞–∂: ${name} ${surname}, ${hybridType} –≥—ñ–±—Ä–∏–¥ ${animal1.name} —Ç–∞ ${animal2.name}
–û–ø–∏—Å: ${hybridDescription}
–ó–æ–≤–Ω—ñ—à–Ω—ñ—Å—Ç—å: ${appearance}, ${bioProsthetic}
–£–∫—Ä–∏—Ç—Ç—è: ${shelter}

–°—Ç–∏–ª—å: –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ü–∏—Ñ—Ä–æ–≤–∏–π –∞—Ä—Ç, –ø–æ—Å—Ç–∞–ø–æ–∫–∞–ª—ñ–ø—Ç–∏—á–Ω–∏–π —Å–µ—Ç—Ç—ñ–Ω–≥, –ø–æ—Ö–º—É—Ä—ñ –∫–æ–ª—å–æ—Ä–∏, –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∫—ñ–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è

–î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ: –º—É—Ç–∞–Ω—Ç-–≥—ñ–±—Ä–∏–¥ —Ç–≤–∞—Ä–∏–Ω, –±—ñ–æ–º–µ—Ö–∞–Ω—ñ—á–Ω—ñ –ø—Ä–æ—Ç–µ–∑–∏, —Ä—É—ó–Ω–∏ —Ü–∏–≤—ñ–ª—ñ–∑–∞—Ü—ñ—ó, —Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–∏–π —Ç—É–º–∞–Ω, –≤–∏–∂–∏–≤–∞–Ω–Ω—è –≤ –ø—É—Å—Ç–µ–ª—ñ

–°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω: 16:9, –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è 4K`;

            document.getElementById('imagePrompt').textContent = prompt;
        }
        
        // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        function copyPrompt() {
            const promptText = document.getElementById('imagePrompt').textContent;
            navigator.clipboard.writeText(promptText).then(() => {
                const btn = document.querySelector('.copy-btn');
                const originalText = btn.textContent;
                btn.textContent = '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!';
                setTimeout(() => {
                    btn.textContent = originalText;
                }, 2000);
            });
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.onload = generateCharacter;
    </script>
</body>
</html>